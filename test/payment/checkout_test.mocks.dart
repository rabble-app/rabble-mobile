// Mocks generated by Mockito 5.4.4 from annotations
// in rabble/test/payment/checkout_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:rabble/core/config/export.dart' as _i2;
import 'package:rabble/domain/entities/UserBasketModel.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBehaviorSubject_0<T> extends _i1.SmartFake
    implements _i2.BehaviorSubject<T> {
  _FakeBehaviorSubject_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRabbleBaseState_1 extends _i1.SmartFake
    implements _i2.RabbleBaseState {
  _FakeRabbleBaseState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CheckoutCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckoutCubit extends _i1.Mock implements _i2.CheckoutCubit {
  MockCheckoutCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BehaviorSubject<List<_i2.ProductDetail>> get productList =>
      (super.noSuchMethod(
        Invocation.getter(#productList),
        returnValue: _FakeBehaviorSubject_0<List<_i2.ProductDetail>>(
          this,
          Invocation.getter(#productList),
        ),
      ) as _i2.BehaviorSubject<List<_i2.ProductDetail>>);

  @override
  _i2.BehaviorSubject<List<_i3.UserBasketData>> get myBasketList =>
      (super.noSuchMethod(
        Invocation.getter(#myBasketList),
        returnValue: _FakeBehaviorSubject_0<List<_i3.UserBasketData>>(
          this,
          Invocation.getter(#myBasketList),
        ),
      ) as _i2.BehaviorSubject<List<_i3.UserBasketData>>);

  @override
  _i2.BehaviorSubject<double> get totalSum => (super.noSuchMethod(
        Invocation.getter(#totalSum),
        returnValue: _FakeBehaviorSubject_0<double>(
          this,
          Invocation.getter(#totalSum),
        ),
      ) as _i2.BehaviorSubject<double>);

  @override
  _i2.BehaviorSubject<double> get totalSumRRP => (super.noSuchMethod(
        Invocation.getter(#totalSumRRP),
        returnValue: _FakeBehaviorSubject_0<double>(
          this,
          Invocation.getter(#totalSumRRP),
        ),
      ) as _i2.BehaviorSubject<double>);

  @override
  _i2.BehaviorSubject<double> get totalDiscount => (super.noSuchMethod(
        Invocation.getter(#totalDiscount),
        returnValue: _FakeBehaviorSubject_0<double>(
          this,
          Invocation.getter(#totalDiscount),
        ),
      ) as _i2.BehaviorSubject<double>);

  @override
  _i2.BehaviorSubject<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _FakeBehaviorSubject_0<bool>(
          this,
          Invocation.getter(#isEmpty),
        ),
      ) as _i2.BehaviorSubject<bool>);

  @override
  List<int> get originalQty => (super.noSuchMethod(
        Invocation.getter(#originalQty),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i2.BehaviorSubject<_i2.UserModel> get userDataSubject$ =>
      (super.noSuchMethod(
        Invocation.getter(#userDataSubject$),
        returnValue: _FakeBehaviorSubject_0<_i2.UserModel>(
          this,
          Invocation.getter(#userDataSubject$),
        ),
      ) as _i2.BehaviorSubject<_i2.UserModel>);

  @override
  _i2.RabbleBaseState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRabbleBaseState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RabbleBaseState);

  @override
  _i4.Stream<_i2.RabbleBaseState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.RabbleBaseState>.empty(),
      ) as _i4.Stream<_i2.RabbleBaseState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> fetchAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllProducts,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> fetchUserBasket(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #fetchUserBasket,
          [teamId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> calculateSum2(List<_i3.UserBasketData>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateSum2,
          [products],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> calculateSum(List<_i2.ProductDetail>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateSum,
          [products],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> calculateSumOfRRP(List<_i2.ProductDetail>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateSumOfRRP,
          [products],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> productQuantity(
    dynamic qty,
    String? productId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #productQuantity,
          [
            qty,
            productId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateThreshold(
    dynamic qty,
    String? productId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateThreshold,
          [
            qty,
            productId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> removeProduct(String? productId) => (super.noSuchMethod(
        Invocation.method(
          #removeProduct,
          [productId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> removeFromBasket(
    String? productId,
    int? remainingDays,
    String? deadLine,
    String? membershipId,
    _i2.BuildContext? context,
    String? hostId,
    int? count,
    String? percentage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromBasket,
          [
            productId,
            remainingDays,
            deadLine,
            membershipId,
            context,
            hostId,
            count,
            percentage,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> increaseQty(
    dynamic qty,
    _i3.UserBasketData? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #increaseQty,
          [
            qty,
            item,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> decreaseQty(
    int? qty,
    _i3.UserBasketData? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #decreaseQty,
          [
            qty,
            item,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> updateBasket(
    String? teamId,
    String? orderId,
    int? deadLineCount,
    String? userId,
    List<_i2.Payments>? payments,
    num? totalOrders,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBasket,
          [
            teamId,
            orderId,
            deadLineCount,
            userId,
            payments,
            totalOrders,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  dynamic getMyPaidPayment(
    List<_i2.Payments>? basket,
    String? myId,
  ) =>
      super.noSuchMethod(Invocation.method(
        #getMyPaidPayment,
        [
          basket,
          myId,
        ],
      ));

  @override
  _i4.Future<void> fetchUserData() => (super.noSuchMethod(
        Invocation.method(
          #fetchUserData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  dynamic calCulateAmountToPay(
    double? totalAmount,
    double? myPaidPayment,
  ) =>
      super.noSuchMethod(Invocation.method(
        #calCulateAmountToPay,
        [
          totalAmount,
          myPaidPayment,
        ],
      ));

  @override
  _i4.Future<void> checkTeamExist(
    _i2.BuildContext? context,
    String? producerName,
    String? producerId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkTeamExist,
          [
            context,
            producerName,
            producerId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String calculatePercentage() => (super.noSuchMethod(
        Invocation.method(
          #calculatePercentage,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #calculatePercentage,
            [],
          ),
        ),
      ) as String);

  @override
  _i4.Future<void> calculateDiscount(List<_i2.ProductDetail>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateDiscount,
          [products],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void emit(_i2.RabbleBaseState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i2.Change<_i2.RabbleBaseState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
