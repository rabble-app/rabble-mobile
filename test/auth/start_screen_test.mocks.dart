// Mocks generated by Mockito 5.4.4 from annotations
// in rabble/test/auth/start_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i10;
import 'dart:ui' as _i8;

import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i4;
import 'package:flutter/src/animation/curves.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:package_info_plus/package_info_plus.dart' as _i9;
import 'package:rabble/core/config/export.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterSecureStorage_0 extends _i1.SmartFake
    implements _i2.FlutterSecureStorage {
  _FakeFlutterSecureStorage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimation_1<T> extends _i1.SmartFake implements _i2.Animation<T> {
  _FakeAnimation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTickerFuture_2 extends _i1.SmartFake implements _i2.TickerFuture {
  _FakeTickerFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehaviorSubject_3<T> extends _i1.SmartFake
    implements _i2.BehaviorSubject<T> {
  _FakeBehaviorSubject_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRabbleBaseState_4 extends _i1.SmartFake
    implements _i2.RabbleBaseState {
  _FakeRabbleBaseState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamTransformer_5<S, T> extends _i1.SmartFake
    implements _i3.StreamTransformer<S, T> {
  _FakeStreamTransformer_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_6 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_7 extends _i1.SmartFake implements _i4.Settings {
  _FakeSettings_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_8<T extends Object?> extends _i1.SmartFake
    implements _i5.CollectionReference<T> {
  _FakeCollectionReference_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_9 extends _i1.SmartFake implements _i5.WriteBatch {
  _FakeWriteBatch_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadBundleTask_10 extends _i1.SmartFake
    implements _i5.LoadBundleTask {
  _FakeLoadBundleTask_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_11<T1 extends Object?> extends _i1.SmartFake
    implements _i5.QuerySnapshot<T1> {
  _FakeQuerySnapshot_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_12<T extends Object?> extends _i1.SmartFake
    implements _i5.Query<T> {
  _FakeQuery_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_13<T extends Object?> extends _i1.SmartFake
    implements _i5.DocumentReference<T> {
  _FakeDocumentReference_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_14<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_15 extends _i1.SmartFake
    implements _i5.SnapshotMetadata {
  _FakeSnapshotMetadata_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RabbleStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockRabbleStorage extends _i1.Mock implements _i2.RabbleStorage {
  MockRabbleStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterSecureStorage get secureStorage => (super.noSuchMethod(
        Invocation.getter(#secureStorage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#secureStorage),
        ),
      ) as _i2.FlutterSecureStorage);

  @override
  set secureStorage(_i2.FlutterSecureStorage? _secureStorage) =>
      super.noSuchMethod(
        Invocation.setter(
          #secureStorage,
          _secureStorage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get tokenKey => (super.noSuchMethod(
        Invocation.getter(#tokenKey),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#tokenKey),
        ),
      ) as String);

  @override
  set tokenKey(String? _tokenKey) => super.noSuchMethod(
        Invocation.setter(
          #tokenKey,
          _tokenKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get loginKey => (super.noSuchMethod(
        Invocation.getter(#loginKey),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#loginKey),
        ),
      ) as String);

  @override
  set loginKey(String? _loginKey) => super.noSuchMethod(
        Invocation.setter(
          #loginKey,
          _loginKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get onBoardKey => (super.noSuchMethod(
        Invocation.getter(#onBoardKey),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#onBoardKey),
        ),
      ) as String);

  @override
  set onBoardKey(String? _onBoardKey) => super.noSuchMethod(
        Invocation.setter(
          #onBoardKey,
          _onBoardKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get userKey => (super.noSuchMethod(
        Invocation.getter(#userKey),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#userKey),
        ),
      ) as String);

  @override
  set userKey(String? _userKey) => super.noSuchMethod(
        Invocation.setter(
          #userKey,
          _userKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#data),
        ),
      ) as String);

  @override
  set data(String? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
      ) as String);

  @override
  set address(String? _address) => super.noSuchMethod(
        Invocation.setter(
          #address,
          _address,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get inivitationData => (super.noSuchMethod(
        Invocation.getter(#inivitationData),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#inivitationData),
        ),
      ) as String);

  @override
  set inivitationData(String? _inivitationData) => super.noSuchMethod(
        Invocation.setter(
          #inivitationData,
          _inivitationData,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get postalCode => (super.noSuchMethod(
        Invocation.getter(#postalCode),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#postalCode),
        ),
      ) as String);

  @override
  set postalCode(String? _postalCode) => super.noSuchMethod(
        Invocation.setter(
          #postalCode,
          _postalCode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get producerInfo => (super.noSuchMethod(
        Invocation.getter(#producerInfo),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#producerInfo),
        ),
      ) as String);

  @override
  set producerInfo(String? _producerInfo) => super.noSuchMethod(
        Invocation.setter(
          #producerInfo,
          _producerInfo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get shareStatus => (super.noSuchMethod(
        Invocation.getter(#shareStatus),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#shareStatus),
        ),
      ) as String);

  @override
  set shareStatus(String? _shareStatus) => super.noSuchMethod(
        Invocation.setter(
          #shareStatus,
          _shareStatus,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get notificatioKey => (super.noSuchMethod(
        Invocation.getter(#notificatioKey),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#notificatioKey),
        ),
      ) as String);

  @override
  set notificatioKey(String? _notificatioKey) => super.noSuchMethod(
        Invocation.setter(
          #notificatioKey,
          _notificatioKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic storeToken(String? token) => super.noSuchMethod(Invocation.method(
        #storeToken,
        [token],
      ));

  @override
  dynamic setFromNotification(String? type) =>
      super.noSuchMethod(Invocation.method(
        #setFromNotification,
        [type],
      ));

  @override
  dynamic storeProducerInfo(String? data) =>
      super.noSuchMethod(Invocation.method(
        #storeProducerInfo,
        [data],
      ));

  @override
  dynamic storePostalCode(String? token) =>
      super.noSuchMethod(Invocation.method(
        #storePostalCode,
        [token],
      ));

  @override
  dynamic setStatusShareWidget(String? status) =>
      super.noSuchMethod(Invocation.method(
        #setStatusShareWidget,
        [status],
      ));

  @override
  dynamic loginStatus(String? status) => super.noSuchMethod(Invocation.method(
        #loginStatus,
        [status],
      ));

  @override
  dynamic onBoarStatus(String? status) => super.noSuchMethod(Invocation.method(
        #onBoarStatus,
        [status],
      ));

  @override
  dynamic userDataStatus(String? status) =>
      super.noSuchMethod(Invocation.method(
        #userDataStatus,
        [status],
      ));

  @override
  dynamic setInivitationData(String? data) =>
      super.noSuchMethod(Invocation.method(
        #setInivitationData,
        [data],
      ));

  @override
  dynamic storeDynamicValue(
    String? key,
    String? value,
  ) =>
      super.noSuchMethod(Invocation.method(
        #storeDynamicValue,
        [
          key,
          value,
        ],
      ));

  @override
  dynamic retrieveDynamicValue(String? key) =>
      super.noSuchMethod(Invocation.method(
        #retrieveDynamicValue,
        [key],
      ));

  @override
  dynamic logout(_i2.BuildContext? context) =>
      super.noSuchMethod(Invocation.method(
        #logout,
        [context],
      ));

  @override
  _i3.Future<void> userAccountDeletion() => (super.noSuchMethod(
        Invocation.method(
          #userAccountDeletion,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteKey,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [NavigatorHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorHelper extends _i1.Mock implements _i2.NavigatorHelper {
  MockNavigatorHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic replaceCurrentAndNavigateTo(
    String? route, [
    Object? arguments,
  ]) =>
      super.noSuchMethod(Invocation.method(
        #replaceCurrentAndNavigateTo,
        [
          route,
          arguments,
        ],
      ));

  @override
  _i3.Future<void> navigateToRemoveUntil({
    required String? to,
    String? removeTil,
    bool Function(_i2.Route<dynamic>)? predicate,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToRemoveUntil,
          [],
          {
            #to: to,
            #removeTil: removeTil,
            #predicate: predicate,
            #arguments: arguments,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void pop<T extends Object>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> clearAllAndNavigateTo(
    String? route, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearAllAndNavigateTo,
          [
            route,
            arguments,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<dynamic> clearAllAndPushWithoutAnimation<T extends Object>(
          String? routeName) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearAllAndPushWithoutAnimation,
          [routeName],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  bool removeTil(
    _i2.Route<dynamic>? route,
    String? fluroRouteName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTil,
          [
            route,
            fluroRouteName,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  String replaceQueryParams(String? route) => (super.noSuchMethod(
        Invocation.method(
          #replaceQueryParams,
          [route],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #replaceQueryParams,
            [route],
          ),
        ),
      ) as String);

  @override
  _i3.Future<T?> navigateTo<T>(
    String? route, [
    Object? arguments,
    bool? force = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [
            route,
            arguments,
            force,
          ],
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  _i3.Future<T?> navigateToClearAll<T>(
    String? route, [
    Object? arguments,
    bool? force = false,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToClearAll,
          [
            route,
            arguments,
            force,
          ],
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  dynamic navigateToScreen(
    String? name, {
    Object? arguments,
  }) =>
      super.noSuchMethod(Invocation.method(
        #navigateToScreen,
        [name],
        {#arguments: arguments},
      ));

  @override
  dynamic navigateAnClearAll(
    String? name, {
    Object? arguments,
  }) =>
      super.noSuchMethod(Invocation.method(
        #navigateAnClearAll,
        [name],
        {#arguments: arguments},
      ));

  @override
  dynamic navigateToWebScreen(
    String? url,
    String? title,
  ) =>
      super.noSuchMethod(Invocation.method(
        #navigateToWebScreen,
        [
          url,
          title,
        ],
      ));

  @override
  String removeTrailingSlash(String? url) => (super.noSuchMethod(
        Invocation.method(
          #removeTrailingSlash,
          [url],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #removeTrailingSlash,
            [url],
          ),
        ),
      ) as String);

  @override
  String getDomainName(String? url) => (super.noSuchMethod(
        Invocation.method(
          #getDomainName,
          [url],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getDomainName,
            [url],
          ),
        ),
      ) as String);
}

/// A class which mocks [AnimationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimationController extends _i1.Mock
    implements _i2.AnimationController {
  MockAnimationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get lowerBound => (super.noSuchMethod(
        Invocation.getter(#lowerBound),
        returnValue: 0.0,
      ) as double);

  @override
  double get upperBound => (super.noSuchMethod(
        Invocation.getter(#upperBound),
        returnValue: 0.0,
      ) as double);

  @override
  _i2.AnimationBehavior get animationBehavior => (super.noSuchMethod(
        Invocation.getter(#animationBehavior),
        returnValue: _i2.AnimationBehavior.normal,
      ) as _i2.AnimationBehavior);

  @override
  set duration(Duration? _duration) => super.noSuchMethod(
        Invocation.setter(
          #duration,
          _duration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set reverseDuration(Duration? _reverseDuration) => super.noSuchMethod(
        Invocation.setter(
          #reverseDuration,
          _reverseDuration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Animation<double> get view => (super.noSuchMethod(
        Invocation.getter(#view),
        returnValue: _FakeAnimation_1<double>(
          this,
          Invocation.getter(#view),
        ),
      ) as _i2.Animation<double>);

  @override
  double get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: 0.0,
      ) as double);

  @override
  set value(double? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get velocity => (super.noSuchMethod(
        Invocation.getter(#velocity),
        returnValue: 0.0,
      ) as double);

  @override
  bool get isAnimating => (super.noSuchMethod(
        Invocation.getter(#isAnimating),
        returnValue: false,
      ) as bool);

  @override
  _i2.AnimationStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i2.AnimationStatus.dismissed,
      ) as _i2.AnimationStatus);

  @override
  bool get isDismissed => (super.noSuchMethod(
        Invocation.getter(#isDismissed),
        returnValue: false,
      ) as bool);

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
      ) as bool);

  @override
  void resync(_i2.TickerProvider? vsync) => super.noSuchMethod(
        Invocation.method(
          #resync,
          [vsync],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.TickerFuture forward({double? from}) => (super.noSuchMethod(
        Invocation.method(
          #forward,
          [],
          {#from: from},
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #forward,
            [],
            {#from: from},
          ),
        ),
      ) as _i2.TickerFuture);

  @override
  _i2.TickerFuture reverse({double? from}) => (super.noSuchMethod(
        Invocation.method(
          #reverse,
          [],
          {#from: from},
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #reverse,
            [],
            {#from: from},
          ),
        ),
      ) as _i2.TickerFuture);

  @override
  _i2.TickerFuture animateTo(
    double? target, {
    Duration? duration,
    _i2.Curve? curve = _i7.Curves.linear,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [target],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #animateTo,
            [target],
            {
              #duration: duration,
              #curve: curve,
            },
          ),
        ),
      ) as _i2.TickerFuture);

  @override
  _i2.TickerFuture animateBack(
    double? target, {
    Duration? duration,
    _i2.Curve? curve = _i7.Curves.linear,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateBack,
          [target],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #animateBack,
            [target],
            {
              #duration: duration,
              #curve: curve,
            },
          ),
        ),
      ) as _i2.TickerFuture);

  @override
  _i2.TickerFuture repeat({
    double? min,
    double? max,
    bool? reverse = false,
    Duration? period,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #repeat,
          [],
          {
            #min: min,
            #max: max,
            #reverse: reverse,
            #period: period,
          },
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #repeat,
            [],
            {
              #min: min,
              #max: max,
              #reverse: reverse,
              #period: period,
            },
          ),
        ),
      ) as _i2.TickerFuture);

  @override
  _i2.TickerFuture fling({
    double? velocity = 1.0,
    _i2.SpringDescription? springDescription,
    _i2.AnimationBehavior? animationBehavior,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fling,
          [],
          {
            #velocity: velocity,
            #springDescription: springDescription,
            #animationBehavior: animationBehavior,
          },
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #fling,
            [],
            {
              #velocity: velocity,
              #springDescription: springDescription,
              #animationBehavior: animationBehavior,
            },
          ),
        ),
      ) as _i2.TickerFuture);

  @override
  _i2.TickerFuture animateWith(_i2.Simulation? simulation) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateWith,
          [simulation],
        ),
        returnValue: _FakeTickerFuture_2(
          this,
          Invocation.method(
            #animateWith,
            [simulation],
          ),
        ),
      ) as _i2.TickerFuture);

  @override
  void stop({bool? canceled = true}) => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
          {#canceled: canceled},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringDetails() => (super.noSuchMethod(
        Invocation.method(
          #toStringDetails,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDetails,
            [],
          ),
        ),
      ) as String);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addStatusListener(_i2.AnimationStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeStatusListener(_i2.AnimationStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Animation<U> drive<U>(_i2.Animatable<U>? child) => (super.noSuchMethod(
        Invocation.method(
          #drive,
          [child],
        ),
        returnValue: _FakeAnimation_1<U>(
          this,
          Invocation.method(
            #drive,
            [child],
          ),
        ),
      ) as _i2.Animation<U>);

  @override
  void didRegisterListener() => super.noSuchMethod(
        Invocation.method(
          #didRegisterListener,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didUnregisterListener() => super.noSuchMethod(
        Invocation.method(
          #didUnregisterListener,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearListeners() => super.noSuchMethod(
        Invocation.method(
          #clearListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearStatusListeners() => super.noSuchMethod(
        Invocation.method(
          #clearStatusListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyStatusListeners(_i2.AnimationStatus? status) => super.noSuchMethod(
        Invocation.method(
          #notifyStatusListeners,
          [status],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlutterBranchSdk].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterBranchSdk extends _i1.Mock implements _i2.FlutterBranchSdk {
  MockFlutterBranchSdk() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [PackageInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfo extends _i1.Mock implements _i9.PackageInfo {
  MockPackageInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get appName => (super.noSuchMethod(
        Invocation.getter(#appName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#appName),
        ),
      ) as String);

  @override
  String get packageName => (super.noSuchMethod(
        Invocation.getter(#packageName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#packageName),
        ),
      ) as String);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  String get buildNumber => (super.noSuchMethod(
        Invocation.getter(#buildNumber),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#buildNumber),
        ),
      ) as String);

  @override
  String get buildSignature => (super.noSuchMethod(
        Invocation.getter(#buildSignature),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#buildSignature),
        ),
      ) as String);

  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i2.AuthCubit {
  MockAuthCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BehaviorSubject<int> get currentIndex => (super.noSuchMethod(
        Invocation.getter(#currentIndex),
        returnValue: _FakeBehaviorSubject_3<int>(
          this,
          Invocation.getter(#currentIndex),
        ),
      ) as _i2.BehaviorSubject<int>);

  @override
  _i2.BehaviorSubject<double> get containerWidth => (super.noSuchMethod(
        Invocation.getter(#containerWidth),
        returnValue: _FakeBehaviorSubject_3<double>(
          this,
          Invocation.getter(#containerWidth),
        ),
      ) as _i2.BehaviorSubject<double>);

  @override
  _i2.BehaviorSubject<bool> get isActiveNextButtonController =>
      (super.noSuchMethod(
        Invocation.getter(#isActiveNextButtonController),
        returnValue: _FakeBehaviorSubject_3<bool>(
          this,
          Invocation.getter(#isActiveNextButtonController),
        ),
      ) as _i2.BehaviorSubject<bool>);

  @override
  _i2.BehaviorSubject<List<double>> get progressValues$subject =>
      (super.noSuchMethod(
        Invocation.getter(#progressValues$subject),
        returnValue: _FakeBehaviorSubject_3<List<double>>(
          this,
          Invocation.getter(#progressValues$subject),
        ),
      ) as _i2.BehaviorSubject<List<double>>);

  @override
  List<int> get storyDurations => (super.noSuchMethod(
        Invocation.getter(#storyDurations),
        returnValue: <int>[],
      ) as List<int>);

  @override
  List<_i2.OnBoardModel> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <_i2.OnBoardModel>[],
      ) as List<_i2.OnBoardModel>);

  @override
  set data(List<_i2.OnBoardModel>? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.BehaviorSubject<String> get selectedCountryImage$ => (super.noSuchMethod(
        Invocation.getter(#selectedCountryImage$),
        returnValue: _FakeBehaviorSubject_3<String>(
          this,
          Invocation.getter(#selectedCountryImage$),
        ),
      ) as _i2.BehaviorSubject<String>);

  @override
  set selectedCountryImage$(
          _i2.BehaviorSubject<String>? _selectedCountryImage$) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedCountryImage$,
          _selectedCountryImage$,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.BehaviorSubject<bool> get focus$ => (super.noSuchMethod(
        Invocation.getter(#focus$),
        returnValue: _FakeBehaviorSubject_3<bool>(
          this,
          Invocation.getter(#focus$),
        ),
      ) as _i2.BehaviorSubject<bool>);

  @override
  set focus$(_i2.BehaviorSubject<bool>? _focus$) => super.noSuchMethod(
        Invocation.setter(
          #focus$,
          _focus$,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.BehaviorSubject<String> get selectedCountryCode$ => (super.noSuchMethod(
        Invocation.getter(#selectedCountryCode$),
        returnValue: _FakeBehaviorSubject_3<String>(
          this,
          Invocation.getter(#selectedCountryCode$),
        ),
      ) as _i2.BehaviorSubject<String>);

  @override
  set selectedCountryCode$(
          _i2.BehaviorSubject<String>? _selectedCountryCode$) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedCountryCode$,
          _selectedCountryCode$,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.BehaviorSubject<String> get ErrorCode$ => (super.noSuchMethod(
        Invocation.getter(#ErrorCode$),
        returnValue: _FakeBehaviorSubject_3<String>(
          this,
          Invocation.getter(#ErrorCode$),
        ),
      ) as _i2.BehaviorSubject<String>);

  @override
  set ErrorCode$(_i2.BehaviorSubject<String>? _ErrorCode$) =>
      super.noSuchMethod(
        Invocation.setter(
          #ErrorCode$,
          _ErrorCode$,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.BehaviorSubject<bool> get iSCompletedNumber$ => (super.noSuchMethod(
        Invocation.getter(#iSCompletedNumber$),
        returnValue: _FakeBehaviorSubject_3<bool>(
          this,
          Invocation.getter(#iSCompletedNumber$),
        ),
      ) as _i2.BehaviorSubject<bool>);

  @override
  set iSCompletedNumber$(_i2.BehaviorSubject<bool>? _iSCompletedNumber$) =>
      super.noSuchMethod(
        Invocation.setter(
          #iSCompletedNumber$,
          _iSCompletedNumber$,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic Function(String) get phoneC => (super.noSuchMethod(
        Invocation.getter(#phoneC),
        returnValue: (String __p0) => null,
      ) as dynamic Function(String));

  @override
  _i3.Stream<String> get phoneStream => (super.noSuchMethod(
        Invocation.getter(#phoneStream),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);

  @override
  _i3.Stream<bool> get validFPField => (super.noSuchMethod(
        Invocation.getter(#validFPField),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  _i2.RabbleBaseState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRabbleBaseState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RabbleBaseState);

  @override
  _i3.Stream<_i2.RabbleBaseState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.RabbleBaseState>.empty(),
      ) as _i3.Stream<_i2.RabbleBaseState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.StreamTransformer<String, String> get validateUsername =>
      (super.noSuchMethod(
        Invocation.getter(#validateUsername),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateUsername),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateEmail =>
      (super.noSuchMethod(
        Invocation.getter(#validateEmail),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateEmail),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validatePassword =>
      (super.noSuchMethod(
        Invocation.getter(#validatePassword),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validatePassword),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validatePhone =>
      (super.noSuchMethod(
        Invocation.getter(#validatePhone),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validatePhone),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateOtp => (super.noSuchMethod(
        Invocation.getter(#validateOtp),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateOtp),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateEmpty =>
      (super.noSuchMethod(
        Invocation.getter(#validateEmpty),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateEmpty),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateGroupName =>
      (super.noSuchMethod(
        Invocation.getter(#validateGroupName),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateGroupName),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateCardNumber =>
      (super.noSuchMethod(
        Invocation.getter(#validateCardNumber),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateCardNumber),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateCVV => (super.noSuchMethod(
        Invocation.getter(#validateCVV),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateCVV),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateExpiry =>
      (super.noSuchMethod(
        Invocation.getter(#validateExpiry),
        returnValue: _FakeStreamTransformer_5<String, String>(
          this,
          Invocation.getter(#validateExpiry),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.Future<void> sendOtp(
    String? type, {
    String? number,
    _i2.InvitationData? invitationData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOtp,
          [type],
          {
            #number: number,
            #invitationData: invitationData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #updateUserInfo,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> verifyToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #verifyToken,
          [token],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> route() => (super.noSuchMethod(
        Invocation.method(
          #route,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.RabbleBaseState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i2.Change<_i2.RabbleBaseState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i5.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_6(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseURL => (super.noSuchMethod(
        Invocation.getter(#databaseURL),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
      ) as String);

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set settings(_i4.Settings? settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_7(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i4.Settings);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i5.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_8<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i5.CollectionReference<Map<String, dynamic>>);

  @override
  _i5.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_9(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i5.WriteBatch);

  @override
  _i3.Future<void> clearPersistence() => (super.noSuchMethod(
        Invocation.method(
          #clearPersistence,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> enablePersistence(
          [_i4.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #enablePersistence,
          [persistenceSettings],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i5.LoadBundleTask loadBundle(_i10.Uint8List? bundle) => (super.noSuchMethod(
        Invocation.method(
          #loadBundle,
          [bundle],
        ),
        returnValue: _FakeLoadBundleTask_10(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
      ) as _i5.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useFirestoreEmulator,
          [
            host,
            port,
          ],
          {#sslEnabled: sslEnabled},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i5.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i4.GetOptions? options = const _i4.GetOptions(),
    required _i5.FromFirestore<T>? fromFirestore,
    required _i5.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryWithConverterGet,
          [name],
          {
            #options: options,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i3.Future<_i5.QuerySnapshot<T>>.value(_FakeQuerySnapshot_11<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i3.Future<_i5.QuerySnapshot<T>>);

  @override
  _i3.Future<_i5.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i4.GetOptions? options = const _i4.GetOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryGet,
          [name],
          {#options: options},
        ),
        returnValue: _i3.Future<_i5.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
      ) as _i3.Future<_i5.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i5.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionGroup,
          [collectionPath],
        ),
        returnValue: _FakeQuery_12<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
      ) as _i5.Query<Map<String, dynamic>>);

  @override
  _i3.Future<void> disableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #disableNetwork,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i5.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i5.DocumentReference<Map<String, dynamic>>);

  @override
  _i3.Future<void> enableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #enableNetwork,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);

  @override
  _i3.Future<T> runTransaction<T>(
    _i5.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> waitForPendingWrites() => (super.noSuchMethod(
        Invocation.method(
          #waitForPendingWrites,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setIndexConfiguration({
    required List<_i4.Index>? indexes,
    List<_i4.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfiguration,
          [],
          {
            #indexes: indexes,
            #fieldOverrides: fieldOverrides,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfigurationFromJSON,
          [json],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i5.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i5.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_13<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i5.DocumentReference<T>);

  @override
  _i5.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_15(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i5.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}
