// Mocks generated by Mockito 5.4.4 from annotations
// in rabble/test/auth/verify_otp_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rabble/core/config/export.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBehaviorSubject_0<T> extends _i1.SmartFake
    implements _i2.BehaviorSubject<T> {
  _FakeBehaviorSubject_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRabbleBaseState_1 extends _i1.SmartFake
    implements _i2.RabbleBaseState {
  _FakeRabbleBaseState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamTransformer_2<S, T> extends _i1.SmartFake
    implements _i3.StreamTransformer<S, T> {
  _FakeStreamTransformer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VerifyOtpCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyOtpCubit extends _i1.Mock implements _i2.VerifyOtpCubit {
  MockVerifyOtpCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BehaviorSubject<String> get selectedCountryImage$ => (super.noSuchMethod(
        Invocation.getter(#selectedCountryImage$),
        returnValue: _FakeBehaviorSubject_0<String>(
          this,
          Invocation.getter(#selectedCountryImage$),
        ),
      ) as _i2.BehaviorSubject<String>);

  @override
  set selectedCountryImage$(
          _i2.BehaviorSubject<String>? _selectedCountryImage$) =>
      super.noSuchMethod(
        Invocation.setter(
          #selectedCountryImage$,
          _selectedCountryImage$,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.BehaviorSubject<Map<dynamic, dynamic>> get otpDataSubject$ =>
      (super.noSuchMethod(
        Invocation.getter(#otpDataSubject$),
        returnValue: _FakeBehaviorSubject_0<Map<dynamic, dynamic>>(
          this,
          Invocation.getter(#otpDataSubject$),
        ),
      ) as _i2.BehaviorSubject<Map<dynamic, dynamic>>);

  @override
  _i2.BehaviorSubject<String> get otpSubject$ => (super.noSuchMethod(
        Invocation.getter(#otpSubject$),
        returnValue: _FakeBehaviorSubject_0<String>(
          this,
          Invocation.getter(#otpSubject$),
        ),
      ) as _i2.BehaviorSubject<String>);

  @override
  dynamic Function(String) get otpC => (super.noSuchMethod(
        Invocation.getter(#otpC),
        returnValue: (String __p0) => null,
      ) as dynamic Function(String));

  @override
  _i3.Stream<String> get otpStream => (super.noSuchMethod(
        Invocation.getter(#otpStream),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);

  @override
  _i3.Stream<bool> get validOTPField => (super.noSuchMethod(
        Invocation.getter(#validOTPField),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  _i3.Stream<int> get timer => (super.noSuchMethod(
        Invocation.getter(#timer),
        returnValue: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);

  @override
  _i2.RabbleBaseState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRabbleBaseState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RabbleBaseState);

  @override
  _i3.Stream<_i2.RabbleBaseState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.RabbleBaseState>.empty(),
      ) as _i3.Stream<_i2.RabbleBaseState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.StreamTransformer<String, String> get validateUsername =>
      (super.noSuchMethod(
        Invocation.getter(#validateUsername),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateUsername),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateEmail =>
      (super.noSuchMethod(
        Invocation.getter(#validateEmail),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateEmail),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validatePassword =>
      (super.noSuchMethod(
        Invocation.getter(#validatePassword),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validatePassword),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validatePhone =>
      (super.noSuchMethod(
        Invocation.getter(#validatePhone),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validatePhone),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateOtp => (super.noSuchMethod(
        Invocation.getter(#validateOtp),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateOtp),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateEmpty =>
      (super.noSuchMethod(
        Invocation.getter(#validateEmpty),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateEmpty),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateGroupName =>
      (super.noSuchMethod(
        Invocation.getter(#validateGroupName),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateGroupName),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateCardNumber =>
      (super.noSuchMethod(
        Invocation.getter(#validateCardNumber),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateCardNumber),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateCVV => (super.noSuchMethod(
        Invocation.getter(#validateCVV),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateCVV),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.StreamTransformer<String, String> get validateExpiry =>
      (super.noSuchMethod(
        Invocation.getter(#validateExpiry),
        returnValue: _FakeStreamTransformer_2<String, String>(
          this,
          Invocation.getter(#validateExpiry),
        ),
      ) as _i3.StreamTransformer<String, String>);

  @override
  _i3.Future<void> verifyOtp(
    String? phoneNumber,
    String? sId,
    String? type,
    _i2.BuildContext? context, {
    _i2.InvitationData? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOtp,
          [
            phoneNumber,
            sId,
            type,
            context,
          ],
          {#data: data},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> sendOtp(Map<dynamic, dynamic>? map) => (super.noSuchMethod(
        Invocation.method(
          #sendOtp,
          [map],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.RabbleBaseState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i2.Change<_i2.RabbleBaseState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RabbleNavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockRabbleNavigatorObserver extends _i1.Mock
    implements _i2.RabbleNavigatorObserver {
  MockRabbleNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i2.Route<dynamic>? newRoute,
    _i2.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i2.Route<dynamic>? route,
    _i2.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Timer].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimer extends _i1.Mock implements _i3.Timer {
  MockTimer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get tick => (super.noSuchMethod(
        Invocation.getter(#tick),
        returnValue: 0,
      ) as int);

  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);

  @override
  void cancel() => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
